# .github/workflows/release.yml
name: Release

on:
  workflow_run:
    workflows: ["Version"]
    types:
      - completed

permissions:
  contents: write

jobs:
  goreleaser:
    name: Run GoReleaser
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'

    steps:
      - name: "Checkout code at the commit processed by Version workflow"
        uses: actions/checkout@v4
        with:
          # github.event.workflow_run.head_sha is the SHA of the commit
          # that triggered the 'Version' workflow on the 'main' branch.
          ref: ${{ github.event.workflow_run.head_sha }}
          fetch-depth: 0 # GoReleaser often needs full history, and we need it for tag detection

      - name: "Check for new version tag on the commit"
        id: get_tag
        run: |
          COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
          echo "Checking for tags on commit $COMMIT_SHA"

          # Fetch *all* remote tags explicitly
          git fetch --tags --force origin 'refs/tags/*:refs/tags/*'

          # List all tags pointing at this exact commit
          TAG_NAME=$(git tag --points-at "$COMMIT_SHA" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z.-]+)?$' || echo "")

          if [ -z "$TAG_NAME" ]; then
            echo "No semantic version tag found on commit $COMMIT_SHA"
            echo "skip_goreleaser=true" >> $GITHUB_OUTPUT
          else
            echo "Found tag: $TAG_NAME"
            echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
            echo "skip_goreleaser=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Set up Go
        if: steps.get_tag.outputs.skip_goreleaser == 'false'
        uses: actions/setup-go@v5
        with:
          go-version: "1.24" # Your specified Go version
          cache: true

      - name: Run GoReleaser
        if: steps.get_tag.outputs.skip_goreleaser == 'false'
        uses: goreleaser/goreleaser-action@v5
        with:
          # version: latest # 'latest' is the default, so often not needed
          args: release --clean
        env:
          # GoReleaser will use this token to upload assets to the GitHub Release
          # that semantic-release (in the 'Version' workflow) should have already created.
          # GoReleaser finds the existing release by the tag name.
          GITHUB_TOKEN: ${{ secrets.TAP_GITHUB_TOKEN }}
          # If you are using GPG signing with GoReleaser:
          # GPG_FINGERPRINT: ${{ secrets.GPG_FINGERPRINT }}
          # GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          # GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
